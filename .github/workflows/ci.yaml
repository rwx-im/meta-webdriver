name: Continuous Integration

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, nightly]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install Rust ${{ matrix.rust }}
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
    - name: Cache Cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    - name: Run Clippy check
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ github.token }}
        args: --all-features
    - uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs:
    - check
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Generate container metadata
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ghcr.io/rwx-im/meta-webdriver
        tags: |
          type=edge
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=sha,format=long,prefix=
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
